# -*- mode: nginx; mode: flyspell-prog;  ispell-current-dictionary: american -*-

### Nginx vhost (virtual server) configuration for Exercise 1.1 of the
### book Nginx Reverse Proxying and Beyond.

server {
    listen 80; # IPv4
    listen [::]:80 ipv6only=on; # IPv6

    ## The hostname. This must be resolved by your machine. Either add
    ## it to your /etc/hostb or create a DNS record for it.
    server_name vulgar.example.local;

    ## This is the root of the site. Adjust according to your setup.
    root /path/to/the/site_root;

    ## Error and access logs.
    error_log /var/log/nginx_reverse_proxying_beyond.error.log;
    access_log /var/log/nginx_reverse_proxying_beyond.access.log;

    ## Here we address Exercise 1.7. Since Nginx has very limited
    ## comparison operators we have to resort to am intermediate user
    ## variable to solve the problem.
    set $special_multi $http_x_special$cookie_is_special;

    ## If the $special variable has the value yes then this request
    ## should be serviced on the special.example.local host.
    if ($special = yes) {
        return 302 http://special.example.local$request_uri;
    }

    ## The good practice is to nest regex based locations in a "fixed"
    ## location. Fixed here means not regex based.

    ## / is the catch all location, meaning if none other is found it
    ## uses this one *always*.
    location / {

        ## We handle HTML pages and images here.
        location ~* \.(?:jpe?g|gif|ico|png|html?)$ {
            ## Expires in 1 month. See
            ## http://nginx.org/en/docs/http/ngx_http_headers_module.html#expires.
            expires 30d;
        }

        ## We handle CSS and JS here.
        location ~* \.(?:css|js)$ {
            ## Expires in 1 year. See
            ## http://nginx.org/en/docs/http/ngx_http_headers_module.html#expires.
            expires 1y;
        }
    }
}

server {
    listen 80; # IPv4
    listen [::]:80 ipv6only=on; # IPv6

    ## The hostname. This must be resolved by your machine. Either add
    ## it to your /etc/hostb or create a DNS record for it.
    server_name special.example.local;

    ## This is the root of the site. Adjust according to your setup.
    root /path/to/the/site_root;

    ## Error and access logs.
    error_log /var/log/nginx_reverse_proxying_beyond.error.log;
    access_log /var/log/nginx_reverse_proxying_beyond.access.log;

    ## Here we address Exercise 1.7. Since Nginx has very limited
    ## comparison operators we have to resort to am intermediate user
    ## variable to solve the problem.
    set $special_multi $http_x_special$cookie_is_special;

    ## If the special variable has the value yes then this request
    ## should be serviced on the special.example.local host.
    if ($special = no) {
        return 302 http://vulgar.example.local$request_uri;
    }

    ## The good practice is to nest regex based locations in a "fixed"
    ## location. Fixed here means not regex based.

    ## / is the catch all location, meaning if none other is found it
    ## uses this one *always*.
    location / {

        ## We handle HTML pages and images here.
        location ~* \.(?:jpe?g|gif|ico|png|html?)$ {
            ## Expires in 1 month. See
            ## http://nginx.org/en/docs/http/ngx_http_headers_module.html#expires.
            expires 30d;
        }

        ## We handle CSS and JS here.
        location ~* \.(?:css|js)$ {
            ## Expires in 1 year. See
            ## http://nginx.org/en/docs/http/ngx_http_headers_module.html#expires.
            expires 1y;
        }
    }
}
